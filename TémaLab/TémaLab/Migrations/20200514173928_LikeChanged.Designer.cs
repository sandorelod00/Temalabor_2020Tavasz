// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TémaLab.Data;

namespace TémaLab.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200514173928_LikeChanged")]
    partial class LikeChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TémaLab.Data.DTOs.PostDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PostDto");
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostDtoId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostDtoId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Szia igen minden kérdésedben nagyon szívesen segítek",
                            PostId = 1,
                            UserId = 13,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "uhhh.... Az lenne az első kérédésem hogyan kell jétszani ? ",
                            PostId = 1,
                            UserId = 2,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Content = "ohhh haver én a mono blura esküszök sokkal élvezetesebb azzal a játék....",
                            PostId = 2,
                            UserId = 11,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Competitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is our first competition gonna be at",
                            Title = "First Competition",
                            UserId = 1,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "This is our seccond competition. created by",
                            Title = "Seccond Competition",
                            UserId = 15,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Sziasztok ugy gondolom itt az ideje hogy sörözünk egyett közösen!!!",
                            Title = "Sörözünk !",
                            UserId = 7,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TémaLab.Data.Entities.EventParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventParticipations");
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Friendship", b =>
                {
                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Friendship");
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<int?>("PostDtoId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostDtoId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("UserId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Helló helló szasztok új vagyok még a weboldalon tudnátok segíteni ? Köszi.",
                            UserId = 2,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Sziasztok a legjobb Mono Red decket keresem tudnátok segíteni ? köszii...",
                            UserId = 3,
                            date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TémaLab.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MTGACode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "8ab04f72-bdd2-4f30-8ace-8543a077ecf3",
                            Email = "peti@mail.hu",
                            EmailConfirmed = false,
                            Introduction = "Én vagyok a Peti",
                            LockoutEnabled = false,
                            MTGACode = "kód",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Kovács Péter"
                        },
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "c89ad75c-5a96-4e40-bbfa-916d27311d6a",
                            Email = "justo.sit.amet@Pellentesquetincidunttempus.ca",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam adipiscing lacus. Ut nec urna et",
                            LockoutEnabled = false,
                            MTGACode = "B7S 4R4",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Melodie"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "309e7fcf-9c38-4712-9e4d-db552decb866",
                            Email = "est.vitae.sodales@tortor.com",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam adipiscing lacus. Ut nec",
                            LockoutEnabled = false,
                            MTGACode = "P3N 8J9",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nathaniel"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "527c5535-779e-4ac3-a65c-386543b7d7cb",
                            Email = "et.magnis@estmollisnon.net",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing",
                            LockoutEnabled = false,
                            MTGACode = "O8R 4J2",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Maggy"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "9c312974-6c68-486f-a0a8-79146b68c6f5",
                            Email = "Duis.cursus.diam@IncondimentumDonec.org",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet,",
                            LockoutEnabled = false,
                            MTGACode = "J0T 9E2",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Reagan"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "f3dc8382-1993-4102-bd0b-4fd9dd1a64ed",
                            Email = "id.erat@eros.com",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit.",
                            LockoutEnabled = false,
                            MTGACode = "X4B 4E1",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Gil"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "2fc8a426-1baf-4793-ad33-f4b08712aeb5",
                            Email = "turpis@montesnasceturridiculus.edu",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam adipiscing",
                            LockoutEnabled = false,
                            MTGACode = "V8B 7U0",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Armand"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "a7773ec2-0bf6-46c9-8a67-62ec167cb097",
                            Email = "sem.eget@sollicitudinamalesuada.org",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam",
                            LockoutEnabled = false,
                            MTGACode = "V3J 1V4",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bruno"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "974b0a1d-1a0e-4f56-9cf4-dced81d1a2b2",
                            Email = "nec.quam.Curabitur@dictum.org",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur",
                            LockoutEnabled = false,
                            MTGACode = "I7C 3T4",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Patrick"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "b426b443-d31e-4ddf-8302-9dee98731fe1",
                            Email = "eget@sociosqu.co.uk",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam",
                            LockoutEnabled = false,
                            MTGACode = "M7S 7Z3",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Sasha"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "2c3b505b-fd23-484e-9697-89d4e213a641",
                            Email = "posuere.at@telluseuaugue.edu",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam adipiscing lacus. Ut",
                            LockoutEnabled = false,
                            MTGACode = "Y9K 8I0",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Nerea"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "173385cc-6ad2-46e9-8a36-62f8b1940d09",
                            Email = "arcu.ac.orci@Nuncac.ca",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer",
                            LockoutEnabled = false,
                            MTGACode = "I1Q 2P3",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Destiny"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "3fe9e694-f278-4f0e-a6d6-b957829a3bf4",
                            Email = "Sed.diam@enimcommodo.org",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing",
                            LockoutEnabled = false,
                            MTGACode = "N7S 9B7",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Megan"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Admin = true,
                            ConcurrencyStamp = "72ed6a31-28fb-48d3-a289-b8d21ad783e5",
                            Email = "nec.tempus.mauris@estac.ca",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Curabitur sed tortor. Integer aliquam",
                            LockoutEnabled = false,
                            MTGACode = "Y1Z 8D5",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Dorian"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Admin = false,
                            ConcurrencyStamp = "b6308890-a636-45ee-a4d6-b22adcc906f7",
                            Email = "lobortis.ultrices.Vivamus@feugiat.net",
                            EmailConfirmed = false,
                            Introduction = "Lorem ipsum",
                            LockoutEnabled = false,
                            MTGACode = "I6G 4F6",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Preston"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TémaLab.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.DTOs.PostDto", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Comment", b =>
                {
                    b.HasOne("TémaLab.Data.DTOs.PostDto", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TémaLab.Data.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Competition", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany("Competitions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Event", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.EventParticipation", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.Event", "Event")
                        .WithMany("eventParticipations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany("EventParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Friendship", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", "User1")
                        .WithMany("Friendships1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TémaLab.Data.Entities.User", "User2")
                        .WithMany("Friendships2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Like", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TémaLab.Data.DTOs.PostDto", null)
                        .WithMany("Likes")
                        .HasForeignKey("PostDtoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TémaLab.Data.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Participation", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.Competition", "Competition")
                        .WithMany("Participations")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TémaLab.Data.Entities.Post", b =>
                {
                    b.HasOne("TémaLab.Data.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
